//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeGen v1.0.0-beta+e8958de5db406d332bd7d37df19a22e962217ce9
//     Script: generate-code.bat (or generate-code.sh for Unix)
//     Timestamp: 2025-06-13T23:18:34.5454279Z
//     Template: ResultCreate.template.cs
//     Target: HeapResult (net8.0+)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     regenerated. Consider modifying the template instead.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using ZeroResult.Core.Errors;

namespace ZeroResult.Core.Models;

/// <summary>
/// Provides factory methods for creating <see cref="HeapResult{T, TError}"/> instances.
/// Designed for zero-allocation result creation in high-performance scenarios.
/// </summary>
public static partial class HeapResult
{
    /// <summary>
    /// Creates a successful <see cref="HeapResult{T, TError}"/> with the specified value.
    /// </summary>
    /// <typeparam name="T">The type of the successful result value</typeparam>
    /// <typeparam name="TError">The error type implementing <see cref="IError"/></typeparam>
    /// <param name="value">The value to return on success</param>
    /// <returns>A successful result containing the value</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static HeapResult<T, TError> Success<T, TError>(T value)
        where TError: IError
        => new(value);

    /// <summary>
    /// Creates a failed <see cref="HeapResult{T, TError}"/> with the specified error.
    /// </summary>
    /// <typeparam name="T">The expected value type when successful</typeparam>
    /// <typeparam name="TError">The error type implementing <see cref="IError"/></typeparam>
    /// <param name="error">The error that caused the failure</param>
    /// <returns>A failed result containing the error</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static HeapResult<T, TError> Failure<T, TError>(TError error)
        where TError: IError
        => new(error);
}
