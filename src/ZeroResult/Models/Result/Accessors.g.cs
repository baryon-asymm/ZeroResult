//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeGen v1.0.0-beta+2aba22e929803a296ead64d46c51322a032541ff
//     Script: generate-code.bat (or generate-code.sh for Unix)
//     Timestamp: 6/21/2025 1:35:02 PM
//     Template: Accessors.template.cs
//     Target: Result (net8.0+)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     regenerated. Consider modifying the template instead.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics;
using System.Runtime.CompilerServices;
using ZeroResult.Errors;
using ZeroResult.Helpers;

namespace ZeroResult;

public readonly partial struct Result<T, TError>
    where TError : IError
{
    /// <summary>
    /// Gets the successful value if the result is successful.
    /// Throws an exception if the result is a failure.
    /// </summary>
    /// <exception cref="InvalidOperationException">Thrown when accessing Value on a failed result.</exception>
    public readonly T Value
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            if (_isSuccess == false)
                ThrowHelper.ThrowInvalidAccess("Cannot access Value on a failed result.");

            Debug.Assert(_value is not null, "Value should not be null when accessing Value on a success.");

            return _value;
        }
    }

    /// <summary>
    /// Gets the error if the result is a failure.
    /// Throws an exception if the result is successful.
    /// </summary>
    /// <exception cref="InvalidOperationException">Thrown when accessing Error on a successful result.</exception>
    public readonly TError Error
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            if (_isSuccess)
                ThrowHelper.ThrowInvalidAccess("Cannot access Error on a successful result.");

            Debug.Assert(_error is not null, "Error should not be null when accessing Error on a failure.");

            return _error;
        }
    }
}
